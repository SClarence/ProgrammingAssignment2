## Caching the Inverse of a Matrix
# The purpose of the program is cache the inverse of a matrix 
# than taking actions to repeat it.

makeCacheMatrix <- function(x = matrix()) 
{                             #stores a matrix and caches its inverse.
  inv <- NULL
  set <- function(y) 
    {
    x <<- y
    inv <<- NULL
     }
 
   get <- function() x
  setInverse <- function(inverse) inv <<- inverse
  getInverse <- function() inv
  
  list(set = set,
       get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}


## This function computes the inverse of the special "matrix" 
# created by makeCacheMatrix above. 


cacheSolve <- function(x, ...) 
  {                       ## Return a matrix that is the inverse of 'x'
  inv <- x$getInverse()
  if (!is.null(inv)) 
    {
    message("getting cached data")
    return(inv)
    }
  
  mat <- x$get()
  inv <- solve(mat, ...)
  x$setInverse(inv)
  inv
  }
